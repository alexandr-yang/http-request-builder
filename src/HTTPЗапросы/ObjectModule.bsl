
#Область ПрограммныйИнтерфейс

// Инициализировать соединение 
//
// Параметры:
//    Метод (Строка)
//    Сервер (Строка)
//    АдресРесурса (Строка)
//
// Возвращаемое значение:
//    ОбработкаОбъект.HTTPЗапросы
////
Функция ИнициализироватьСоединение(Метод, Сервер, АдресРесурса) Экспорт 
    
    ОчиститьПараметрыЗапроса();
    
    УстановитьПараметрЗапроса("Метод", Метод);
    УстановитьПараметрЗапроса("Сервер", Сервер);
    УстановитьПараметрЗапроса("АдресРесурса", АдресРесурса);
    
    Возврат ЭтотОбъект;
    
КонецФункции

//  Использовать защищенное соединение 
//
// Возвращаемое значение:
//    ОбработкаОбъект.HTTPЗапросы
////
Функция ИспользоватьЗащищенноеСоединение() Экспорт 
    
    УстановитьПараметрЗапроса("ЗащищенноеСоединение", Новый ЗащищенноеСоединениеOpenSSL());
    
    Возврат ЭтотОбъект;
    
КонецФункции

// Использовать кодировку 
//
// Параметры:
//    Кодировка (Строка / КодировкаТекста)
//
// Возвращаемое значение:
//    ОбработкаОбъект.HTTPЗапросы
////
Функция ИспользоватьКодировку(Кодировка) Экспорт 
    
    УстановитьПараметрЗапроса("Кодировка", Кодировка);
    
    Возврат ЭтотОбъект;
    
КонецФункции

// Установить заголовки 
//
// Параметры:
//    Заголовки (Струкрура / Соответствие)
//
// Возвращаемое значение:
//    ОбработкаОбъект.HTTPЗапросы
////
Функция УстановитьЗаголовки(Заголовки) Экспорт 
    
    Для Каждого Заголовок Из Заголовки Цикл
        УстановитьЗаголовок(Заголовок.Ключ, Заголовок.Значение);
    КонецЦикла;
    
    Возврат ЭтотОбъект;
    
КонецФункции

// Установить заголовок 
//
// Параметры:
//    Ключ (Строка)
//    Значение (Строка)
//
// Возвращаемое значение:
//    ОбработкаОбъект.HTTPЗапросы
////
Функция УстановитьЗаголовок(Ключ, Значение) Экспорт 
    
    Если ПолучитьПараметрЗапроса("Заголовки") = Неопределено Тогда
        УстановитьПараметрЗапроса("Заголовки", Новый Соответствие);
    КонецЕсли;
    
    ПараметрыЗапроса["Заголовки"].Вставить(Ключ, Значение);
    
    Возврат ЭтотОбъект;

КонецФункции

// Установить тело запроса из строки 
//
// Параметры:
//    ТелоЗапроса (Строка)
//
// Возвращаемое значение:
//    ОбработкаОбъект.HTTPЗапросы
////
Функция УстановитьТелоЗапросаИзСтроки(ТелоЗапроса) Экспорт 

    УстановитьПараметрЗапроса("ТелоЗапроса", ТелоЗапроса);

    Возврат ЭтотОбъект;

КонецФункции

//  Отправить HTTP-запрос 
//
// Возвращаемое значение:
//    Структура - Формируется функцией ПолучитьСтруктуруОтвета
////
////
Функция ОтправитьЗапрос() Экспорт 
    
    Метод = ПолучитьПараметрЗапроса("Метод");
    Сервер = ПолучитьПараметрЗапроса("Сервер");
    АдресРесурса = ПолучитьПараметрЗапроса("АдресРесурса");
    ЗащищенноеСоединение = ПолучитьПараметрЗапроса("ЗащищенноеСоединение");
    Таймаут = ПолучитьПараметрЗапроса("Таймаут", 0);
    Кодировка = ПолучитьПараметрЗапроса("Кодировка", КодировкаТекста.UTF8);
    Заголовки = ПолучитьПараметрЗапроса("Заголовки", Новый Соответствие);
    ТелоЗапроса = ПолучитьПараметрЗапроса("ТелоЗапроса");
    
    ОчиститьПараметрыЗапроса();
    
    HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
    
    Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
        HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, Кодировка);
    КонецЕсли;
    
    HTTPСоединение = Новый HTTPСоединение(Сервер, , , , , Таймаут, ЗащищенноеСоединение);
    
    Попытка
        HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
    Исключение
        HTTPОтвет = Неопределено;
    КонецПопытки;
    
    Возврат ОбработатьОтвет(HTTPОтвет, Кодировка);
    
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыФункции

// 
////
Функция ОбработатьОтвет(HTTPОтвет, Кодировка) 
    
    Отказ = Ложь;
    КодСостояния = 0;
    Заголовки = Новый Соответствие;
    ТелоОтвета = "";
    
    Если HTTPОтвет = Неопределено Тогда
        Отказ = Истина;
    Иначе
        Если HTTPОтвет.КодСостояния >= 400 Тогда
            Отказ = Истина;
        КонецЕсли;
        
        КодСостояния = HTTPОтвет.КодСостояния;
        Заголовки = HTTPОтвет.Заголовки;
        ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку(Кодировка);
    КонецЕсли;
    
    Возврат ПолучитьСтруктуруОтвета(Отказ, КодСостояния, Заголовки, ТелоОтвета);
    
КонецФункции

// 
////
Функция ПолучитьСтруктуруОтвета(Отказ, КодСостояния, Заголовки, ТелоОтвета) 
    
    Структура = Новый Структура;
    Структура.Вставить("Отказ", Отказ);
    Структура.Вставить("КодСостояния", КодСостояния);
    Структура.Вставить("Заголовки", Заголовки);
    Структура.Вставить("ТелоОтвета", ТелоОтвета);
    
    Возврат Структура;
    
КонецФункции

// 
////
Функция ПолучитьПараметрЗапроса(Ключ, ЗначениеПоУмолчанию = Неопределено) 
    
    Значение = ПараметрыЗапроса.Получить(Ключ);
    
    Возврат ?(Значение = Неопределено, ЗначениеПоУмолчанию, Значение);
    
КонецФункции

// 
////
Процедура УстановитьПараметрЗапроса(Ключ, Значение) 
    
    ПараметрыЗапроса.Вставить(Ключ, Значение);
    
КонецПроцедуры

// 
////
Процедура ОчиститьПараметрыЗапроса() 
    
    ПараметрыЗапроса = Новый Соответствие;
    
КонецПроцедуры

#КонецОбласти
